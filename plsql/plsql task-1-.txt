--1.Write a PL/SQL program to arrange the number of two variable in such a way that the small number will store in num_small variable and large number will store in num_large variable.
SET SERVEROUTPUT ON
DECLARE
V_NUM1 NUMBER:=&A;
V_NUM2 NUMBER:=&B;

BEGIN
IF 
V_NUM2>V_NUM1 THEN
DBMS_OUTPUT.PUT_LINE('LARGE NO = ' || V_NUM2 || 'SMALL NO = ' || V_NUM1);
ELSE
DBMS_OUTPUT.PUT_LINE('LARGE NO = ' || V_NUM1 || 'SMALL NO = ' || V_NUM2);
END IF;
END;


--2.Write a PL/SQL program to check whether a given character is letter or digit.

DECLARE
    V_NUM CHAR(1) := '&input_a_character';
BEGIN
    IF ( V_NUM >= 'A'
         AND V_NUM <= 'Z' )
        OR ( V_NUM >= 'a'
             AND V_NUM <= 'z' ) THEN
      dbms_output.Put_line ('The given character is a letter');
      ELSIF V_NUM BETWEEN '0' AND '9' THEN
        dbms_output.Put_line ('The given character is a DIGIT');
      ELSE
        dbms_output.Put_line ('The given character is not a DIGIT AND LETTER');
      END IF;
END;


--
--3.Write a program in PL/SQL to print the value of a variable inside and outside a loop using LOOP WHEN EXIT statement.

DECLARE
V_N NUMBER := &N;
BEGIN

LOOP
IF V_N >8 THEN
EXIT;
END IF;
DBMS_OUTPUT.PUT_LINE('Inner Loop: '||V_N);
V_N :=V_N+2;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Outer Loop' || V_N);
END;



--4.Write a PL/SQL program to display which day is a specific date
DECLARE
V_DATE DATE :='&DATE';
BEGIN
DBMS_OUTPUT.PUT_LINE('The Date ' || V_DATE || ' is ' || TO_CHAR(V_DATE,'DAY'));
END;



--5.Write a PL/SQL procedure to calculate the incentive on a specific target otherwise a general incentive to be paid using IF-THEN-ELSE.


CREATE TABLE XX_EMP_(EMP_NAME VARCHAR2(10),EMP_ADDRESS VARCHAR2(10),EMP_SALARY NUMBER);
INSERT INTO XX_EMP_ VALUES('&EMP_NAME','&EMP_ADDRESS','&EMP_SALARY');
SELECT * FROM XX_EMP_;
DECLARE
    V_SALARY XX_EMP_.EMP_SALARY%TYPE;
BEGIN
    SELECT EMP_SALARY 
    INTO V_SALARY
    FROM XX_EMP_
    WHERE EMP_ADDRESS='CBE';
    IF V_SALARY < 10000 THEN
    NULL;
    ELSIF V_SALARY <19000 THEN
    V_SALARY :=V_SALARY + 2000;
    ELSE
    V_SALARY :=V_SALARY + 4000;
    END IF;
    DBMS_OUTPUT.PUT_LINE('The Updated Salary is '||V_SALARY);
END; 





--6.Write a PL/SQL block to calculate the incentive of an employee whose ID is 110.

DECLARE
V_SALARY XX_EMP_.EMP_SALARY%TYPE;
BEGIN
SELECT EMP_SALARY INTO V_SALARY FROM XX_EMP_ WHERE EMP_ID=110;
IF V_SALARY < 10000 THEN
    NULL;
    ELSIF V_SALARY <19000 THEN
    V_SALARY :=V_SALARY + 2000;
    ELSE
    V_SALARY :=V_SALARY + 4000;
    END IF;
    UPDATE XX_EMP_ SET SALARY=V_SALARY WHERE EMPID=110;
    DBMS_OUTPUT.PUT_LINE('The Updated Salary is '||V_SALARY);




--7. Write a block to display name, contact no and no of rows from employee table.


DECLARE
V_NAME XX_EMP_.EMP_NAME%TYPE;
V_COUNT NUMBER;
BEGIN
SELECT EMP_NAME,(SELECT COUNT(*) "Total" FROM XX_EMP_)
INTO V_NAME,V_COUNT
FROM XX_EMP_
WHERE EMPID=110;
DBMS_OUTPUT.PUT_LINE('Name ' || V_NAME || 'and Row count is ' || V_COUNT);
END;
--




--8.To develop a procedure named adjust_salary() sample database.
-- Weâ€™ll update the salary information of employees in the employees table by 
--using SQL UPDATE statement.



CREATE OR REPLACE PROCEDURE ADJUST_SALARY
(V_EMPID IN XX_EMP_.EMP_ID%TYPE,V_SALARY IN XX_EMP_.EMP_SALARY%TYPE) IS
BEGIN
UPDATE XX_EMP_
SET EMP_SALARY=EMP_SALARY+V_SALARY
WHERE EMP_ID=V_EMPID;
END;
SELECT * FROM XX_EMP_;
EXEC ADJUST_SALARY(110,3000);